generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum IntegrationType {
  BIG_QUERY
  SQL_SERVER
  MYSQL
  TIMESCALE
  SUPABASE
  CUBE
  CRATE_DB
  COCKROACH_DB
  SINGLE_STORE
  MATERIALIZE
  POSTGRESQL
  AWS_REDSHIT
  SNOWFLAKE
  ROCKSET
  CLICKHOUSE
}

enum ChartType {
  BAR_CHART
  LINE_CHART
  TABLE_VIEW
  PIE_CHART
  KPI_VIEW
}

enum MemberRoleType {
  ADMIN
  MEMBER
}

model User {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  password         String
  passwordResetOtp String?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  members          Member[]
}

model Organization {
  id             String          @id @default(uuid())
  name           String
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  members        Member[]
  userInvites    UserInvite[]
  dataSources    DataSource[]
  visualizations Visualization[]
  apiKeys        ApiKey[]
  renderList     Render[]
  testVariables  TestVariable[]
}

model Member {
  organizationId String         @map("organization_id")
  organization   Organization   @relation(references: [id], fields: [organizationId])
  userId         String         @map("user_id")
  user           User           @relation(references: [id], fields: [userId])
  role           MemberRoleType

  @@id([organizationId, userId])
}

model UserInvite {
  id             String         @id @default(uuid())
  email          String         @unique
  otp            String
  expiresAt      DateTime       @map("expires_at")
  role           MemberRoleType
  organizationId String         @map("organization_id")
  organization   Organization   @relation(references: [id], fields: [organizationId])
}

model DataSource {
  id              String          @id @default(uuid())
  name            String
  integrationType IntegrationType
  host            String
  port            Int
  database        String
  username        String
  password        String
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  visualizations  Visualization[]
  organizationId  String          @map("organization_id")
  organization    Organization    @relation(references: [id], fields: [organizationId])
}

model Visualization {
  id             String       @id @default(uuid())
  name           String
  datasourceId   String       @map("organization_id")
  datasource     DataSource   @relation(references: [id], fields: [datasourceId])
  plainSql       String       @map("plain_sql")
  organizationId String
  organization   Organization @relation(references: [id], fields: [organizationId])
  render         Render?
}

model Render {
  chartType       ChartType     @map("chart_type")
  visualization   Visualization @relation(references: [id], fields: [visualizationId])
  visualizationId String        @unique @map("visualization_id")

  organization   Organization @relation(references: [id], fields: [organizationId])
  organizationId String       @map("organization_id")

  format Json

  @@id([visualizationId, organizationId])
}

model ApiKey {
  name           String
  apiKey         String       @id @unique @map("api_key")
  createdAt      DateTime     @default(now()) @map("created_at")
  organizationId String       @map("organization_id")
  organization   Organization @relation(references: [id], fields: [organizationId])
}

model TestVariable {
  id             String       @id @default(uuid())
  name           String
  type           String
  value          String
  organizationId String       @map("organization_id")
  organization   Organization @relation(references: [id], fields: [organizationId])
}
