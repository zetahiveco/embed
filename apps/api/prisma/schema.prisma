generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum IntegrationType {
  BIG_QUERY
  SQL_SERVER
  MYSQL
  TIMESCALE
  SUPABASE
  CUBE
  CRATE_DB
  COCKROACH_DB
  SINGLE_STORE
  MATERIALIZE
  POSTGRESQL
  AWS_REDSHIT
  SNOWFLAKE
  ROCKSET
  CLICKHOUSE
}

enum ChartType {
  BAR_CHART
  LINE_CHART
  TABLE_VIEW
  PIE_CHART
}

enum MemberRoleType {
  ADMIN
  MEMBER
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  members    Member[]
}

model Organization {
  id             String          @id @default(uuid())
  name           String
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  members        Member[]
  userInvites    UserInvite[]
  apps           Application[]
  dataSources    DataSource[]
  visualizations Visualization[]
  apiKeys        ApiKey[]
}

model Member {
  organization_id String
  organization    Organization   @relation(references: [id], fields: [organization_id])
  user_id         String
  user            User           @relation(references: [id], fields: [user_id])
  role            MemberRoleType

  @@id([organization_id, user_id])
}

model UserInvite {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime

  // Attributes of organization
  role            MemberRoleType
  organization_id String
  organization    Organization   @relation(references: [id], fields: [organization_id])
}

model Application {
  id              String       @id @default(uuid())
  name            String
  organization_id String
  organization    Organization @relation(references: [id], fields: [organization_id])
  created_at      DateTime
}

model DataSource {
  id                    String          @id @default(uuid())
  name                  String
  integration_mechanism IntegrationType
  host                  String
  port                  Int
  database              String
  username              String
  password              String
  created_at            DateTime        @default(now())
  updated_at            DateTime        @updatedAt
  visualizations        Visualization[]
  organization_id       String
  organization          Organization    @relation(references: [id], fields: [organization_id])
}

model Visualization {
  id              String       @id @default(uuid())
  name            String
  chart_type      ChartType
  datasource_id   String
  datasource      DataSource   @relation(references: [id], fields: [datasource_id])
  plain_sql       String
  organization_id String
  organization    Organization @relation(references: [id], fields: [organization_id])
}

model ApiKey {
  id              String       @id @default(uuid())
  name            String
  api_key         String       @unique
  created_at      DateTime     @default(now())
  organization_id String
  organization    Organization @relation(references: [id], fields: [organization_id])
}
